package com.analysis;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;

public class AnalysisUI {

    NLPIRSeg nlpirSeg;
    KeyExtract ke;
    KeywordUI keywordUI;

    final int maxKeyLimits = 10;

    private JPanel root;
    private JLabel label;
    private JTextArea inputText;
    private JTextArea outputText;
    private JButton button;
    private JTextField textField1;
    private JButton button2;
    private JLabel label2;
    private JLabel label3;


    public AnalysisUI() throws IOException {

        nlpirSeg = new NLPIRSeg();
        ke = new KeyExtract();

        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                outputText.setText("");
                String inputString = inputText.getText();
                String resultString = nlpirSeg.segment(inputString, 3);
                String[] tokens = resultString.split(" ");
                outputText.setText(new String(String.join("\n", tokens)));
            }
        });

        button2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String sentence = inputText.getText();
                if (sentence.length() > 1) {
                    String maxLimit = textField1.getText();
                    if (maxLimit.length() > 0 && isNumeric(maxLimit)) {
                        int maxLimitInteger = Integer.valueOf(maxLimit);
                        ArrayList<WordWeight> wwList = ke.keyword(sentence, maxLimitInteger);
                        keywordUI = new KeywordUI("新闻关键词分析", sentence + "\n词语指数 - TOP " + maxLimitInteger, wwList);
                    } else {
                        ArrayList<WordWeight> wwList = ke.keyword(sentence, maxKeyLimits);
                        keywordUI = new KeywordUI("新闻关键词分析", sentence + "\n词语指数 - TOP " + maxKeyLimits, wwList);
                    }
                }
            }
        });
    }

    public static void show() throws IOException {
        JFrame frame = new JFrame("新闻摘要文本分析");
        frame.setContentPane(new AnalysisUI().$$$getRootComponent$$$());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }


    private static boolean isNumeric(String str) {
        for (int i = str.length(); --i >= 0; ) {
            if (!Character.isDigit(str.charAt(i))) {
                return false;
            }
        }
        return true;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        label = new JLabel();
        Font labelFont = this.$$$getFont$$$("Microsoft YaHei UI", Font.BOLD, 14, label.getFont());
        if (labelFont != null) label.setFont(labelFont);
        label.setText(" 输入文本");
        panel1.add(label, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        inputText = new JTextArea();
        Font inputTextFont = this.$$$getFont$$$("Microsoft YaHei UI", Font.PLAIN, 12, inputText.getFont());
        if (inputTextFont != null) inputText.setFont(inputTextFont);
        inputText.setLineWrap(true);
        inputText.setMargin(new Insets(5, 5, 5, 5));
        inputText.setText("");
        inputText.setWrapStyleWord(false);
        panel1.add(inputText, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(520, 80), new Dimension(520, 80), null, 0, false));
        label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$("Microsoft YaHei UI", Font.BOLD, 14, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText(" 分词结果");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 160), null, null, 0, false));
        outputText = new JTextArea();
        Font outputTextFont = this.$$$getFont$$$("Microsoft YaHei UI", Font.PLAIN, 12, outputText.getFont());
        if (outputTextFont != null) outputText.setFont(outputTextFont);
        outputText.setLineWrap(false);
        outputText.setMargin(new Insets(5, 5, 0, 0));
        scrollPane1.setViewportView(outputText);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 25), new Dimension(-1, 30), new Dimension(-1, 30), 0, false));
        button = new JButton();
        Font buttonFont = this.$$$getFont$$$("Microsoft YaHei UI", Font.PLAIN, 12, button.getFont());
        if (buttonFont != null) button.setFont(buttonFont);
        button.setText("分词");
        panel2.add(button, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("Microsoft YaHei UI", Font.BOLD, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText(" 预设关键词个数");
        panel2.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(114, 19), null, 0, false));
        textField1 = new JTextField();
        Font textField1Font = UIManager.getFont("TextField.font");
        if (textField1Font != null) textField1.setFont(textField1Font);
        textField1.setText("");
        panel2.add(textField1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 24), null, 0, false));
        button2 = new JButton();
        Font button2Font = this.$$$getFont$$$("Microsoft YaHei UI", Font.PLAIN, 12, button2.getFont());
        if (button2Font != null) button2.setFont(button2Font);
        button2.setText("提取");
        panel2.add(button2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }
}
